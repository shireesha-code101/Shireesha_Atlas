class Resource {
    void method(Resource r1, Resource r2) {
        // Always lock in a consistent order to prevent deadlock
        synchronized (r1) {
            System.out.println(Thread.currentThread().getName() + " locked " + r1);
            try { Thread.sleep(100); } catch (InterruptedException e) {}

            synchronized (r2) {
                System.out.println(Thread.currentThread().getName() + " locked " + r2);
                System.out.println(Thread.currentThread().getName() + " is executing critical section");
            }
        }
    }

    @Override
    public String toString() {
        return "Resource@" + Integer.toHexString(hashCode());
    }
}

public class DeadlockFreeExample {
    public static void main(String[] args) {
        final Resource r1 = new Resource();
        final Resource r2 = new Resource();

        Thread t1 = new Thread(() -> {
            new Resource().method(r1, r2);
        }, "Thread-1");

        Thread t2 = new Thread(() -> {
            new Resource().method(r1, r2); // Notice: same order r1, r2
        }, "Thread-2");

        t1.start();
        t2.start();
    }
}
