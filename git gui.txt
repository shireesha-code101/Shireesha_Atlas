Task 14: Use the above code Task 11 and create a method in innerclass and return the outer class variable
class OuterClass{
	Int x = 50;
Class InnerClass {
		Public int innerMethod() {
			Return x;
		}
}
}

Public class DriverClass {
	psvm(){
		OuterClass myOuter = new OuterClass();
		OuterClass.InnerClass myInner = myOuter.new InnerClass();
    		System.out.println(myInner.innerMethod());
}
}

Task 15:
Give reason or the code..
class OuterClass {
  int x = 10;
  static class InnerClass {
    static int y = 5;
  }
}
public class Main {
  public static void main(String[] args) {
     OuterClass.InnerClass myInner = new OuterClass.InnerClass();
    System.out.println(myInner.y);

  }
}


import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import java.lang.Integer;

public class Java8ForEachExample {

 public static void main(String[] args) {
  
  List<Integer> myList = new ArrayList<Integer>();
  for(int i=0; i<10; i++) myList.add(i);
  
  Iterator<Integer> it = myList.iterator();
  while(it.hasNext()){
   Integer i = it.next();
   System.out.println("Iterator Value::"+i);
  }
  
  myList.forEach(new Consumer<Integer>() {

   public void accept(Integer t) {
    System.out.println("forEach anonymous class Value::"+t);
   }

  });
  
  //traversing with Consumer interface implementation
  MyConsumer action = new MyConsumer();
  myList.forEach(action);
  
 }

}

//Consumer implementation that can be reused
class MyConsumer implements Consumer<Integer>{

 public void accept(Integer t) {
  System.out.println("Consumer impl Value::"+t);
 }
}


